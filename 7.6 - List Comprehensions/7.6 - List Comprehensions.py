###########List Comprehensions

######List Comprehensions

#collapse for loops for building lists into a single line
#Syntax = [(operation for i in (list/tuples)]


#ex 1: List Comprehensions - Basics

#Standard with for loop
squares = []

for i in range(1,101):
    squares.append((i**2))

print(squares)

#Using List Comprehension

squares2 = [i**2 for i in range(1,101)]

print(squares2)


#ex 2: List Comprehensions - advanced

movies = ["Gone with the wind", "Rear Windo", "Ghostbusters", "To Kill a Mockingbird", "Good will hunting"]

#Standard with for loop

gmovies = []

for title in movies:
    if title.startswith("G"):
        gmovies.append(title)

print(gmovies)

#Using List Comprehension

gmovies2 = [title for title in movies if title.startswith("G")]

print(gmovies2)

#ex 3: List Comprehensions - advanced (Tuples)

movies = [("Gone with the wind", 1946), ("Rear Windo", 2007), ("Ghostbusters", 1995), ("To Kill a Mockingbird", 1967), ("Good will hunting", 1987)]

pre2k = [title for (title, year) in movies if year < 2000]

print(pre2k)

#ex 4: List Comprehensions - nest loops

pairs_1 = []

for num1 in range(0,2):
    for num2 in range(6,8):
        pairs_1.append((num1,num2))

print(pairs_1)

#or

pairs_2 = [(num1,num2) for num1 in range(0,2) for num2 in range(6,8)]
print(pairs_2)


#Test

# Create a 5 x 5 matrix using a list of lists: matrix
matrix = [[[x1,x2,x3,x4,x5] for y in range(0,5)] for x1 in range(0,1) for x2 in range(1,2) for x3 in range(2,3) for x4 in range(3,4) for x5 in range(4,5)]

# Print the matrix
for row in matrix:
    print(row)


#response

# Create a 5 x 5 matrix using a list of lists: matrix
matrix = [[col for col in range(5)] for row in range(5)]

# Print the matrix
for row in matrix:
    print(row)


#ex 4: Conditional Comprehensions

x = [num ** 2 for num in range(10) if num % 2 == 0]
print(x)

#ex 5: Conditional Comprehensions (pt2)

x = [num ** 2 if num % 2 ==0 else 0 for num in range(10)]
print(x)

#ex 6: Dictionaries with list comprehensions

pos_neg = {num: -num for num in range(9)}
print(pos_neg)

#ex 7: List Comprehenson Practice example

# Create a list of strings: fellowship
fellowship = ['frodo', 'samwise', 'merry', 'aragorn', 'legolas', 'boromir', 'gimli']

# Create list comprehension: new_fellowship
new_fellowship = [member for member in fellowship if len(member) >= 7 ]

# Print the new list
print(new_fellowship)


#ex 8: List Comprehenson Practice example (pt2)

# Create a list of strings: fellowship
fellowship = ['frodo', 'samwise', 'merry', 'aragorn', 'legolas', 'boromir', 'gimli']

# Create list comprehension: new_fellowship
new_fellowship = [member if len(member) >= 7 else '' for member in fellowship]

# Print the new list
print(new_fellowship)

#ex 9: List Comprehenson Practice example with dictionaries (pt3)

# Create a list of strings: fellowship
fellowship = ['frodo', 'samwise', 'merry', 'aragorn', 'legolas', 'boromir', 'gimli']

# Create dict comprehension: new_fellowship
new_fellowship = {member: len(member) for member in fellowship}

# Print the new dictionary
print(new_fellowship)



#####Generators

#1: Basic - Generators

# Create generator object: result
result = (num for num in range(31))

# Print the first 5 values
print(next(result))
print(next(result))
print(next(result))
print(next(result))
print(next(result))

# Print the rest of the values
for value in result:
    print(value)


#2: Generators - generators with lenghts

# Create a list of strings: lannister
lannister = ['cersei', 'jaime', 'tywin', 'tyrion', 'joffrey']

# Create a generator object: lengths
lengths = (len(x) for x in lannister)

# Iterate over and print the values in lengths
for value in lengths:
    print(value)

#3: Generators - generators with function

# Create a list of strings
lannister = ['cersei', 'jaime', 'tywin', 'tyrion', 'joffrey']

# Define generator function get_lengths
def get_lengths(input_list):
    """Generator function that yields the
    length of the strings in input_list."""

    # Yield the length of a string
    for person in input_list:
        yield len(person)

# Print the values generated by get_lengths()
for value in get_lengths(lannister):
    print(value)

#4: Generators - generators  function

def num_sequence(n):
    """Generate value from 0 to n"""
    i=0
    while i < n:
        yield i
        i += 1


print(list(num_sequence(3)))